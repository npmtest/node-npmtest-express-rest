{"/home/travis/build/npmtest/node-npmtest-express-rest/test.js":"/* istanbul instrument in package npmtest_express_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-rest/lib.npmtest_express_rest.js":"/* istanbul instrument in package npmtest_express_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_rest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_rest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-rest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-rest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_rest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_rest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_rest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_rest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_rest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_rest.__dirname + '/lib.npmtest_express_rest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-rest/node_modules/express-rest/expressRest.js":"var concatStream = require('concat-stream'),\n    stringDecoder = require('string_decoder');\n\nmodule.exports = function(app, options) {\n    if (!app) throw new Error('Must provide express instance.');\n\n\n    var rest = {\n        get: get,\n        put: put,\n        post: post,\n        'delete': delete_\n\n    };\n    var serializers = {\n        json: jsonSerializer()\n        // TODO: xml: xmlSerializer()\n    };\n\n    var methods = ['GET', 'PUT', 'POST', 'DELETE'];\n    var maxParams = 0;\n    init();\n    return rest;\n    // reference; http://www.w3schools.com/tags/ref_httpmessages.asp\n\n    function init() {\n        if (options) {\n            if (options.serializers) {\n                for (var key in options.serializers) {\n                    serializers[key] = options.serializers[key];\n                }\n            }\n        }\n    }\n\n    function register(app, path, controller) {\n        if (typeof controller.get === 'function') {\n            // Register GET handlers\n            var handler = anyHandler(controller.get.bind(controller));\n            app.get(path, handler);\n            var getPath = path;\n            for (var i = 1; i < controller.get.length; i++) {\n                getPath += '/:api' + i;\n                app.get(getPath, handler);\n            }\n        }\n    }\n\n    function get(path, handler) {\n        app.get(path, anyHandler(handler));\n        return this;\n    }\n    function put(path, handler) {\n        app.put(path, anyHandler(handler));\n        return this;\n    }\n    function post(path, handler) {\n        app.post(path, anyHandler(handler));\n        return this;\n    }\n    function delete_(path, handler) {\n        app.delete(path, anyHandler(handler));\n        return this;\n    }\n\n    function anyHandler(apiHandler) {\n        return function(req, res) {\n            // parse JSON body\n            var contentType = req.headers['content-type'];\n            if (contentType) {\n                // Parse request body\n                for (var key in serializers) {\n                    if (req.is(key) || contentType == key) {\n                        var ser = serializers[key];\n                        try {\n                            ser.deserialize(req, res, continueRequest);\n                        } catch (ex) {\n                            continueRequest(ex);\n                        }\n                        return;\n                    }\n                }\n                // Could not find a parser.\n                rest.unsupportedMediaType();\n            } else {\n                return continueRequest();\n            }\n\n            function continueRequest(err) {\n                var rest = restResponse(req, res, continueResponse);\n                if (err) {\n                    res.set('Content-Type', 'text/plain');\n                    res.status(500);\n                    res.send(err.toString());\n                } else {\n                    apiHandler(req, rest);\n                }\n            }\n\n            function continueResponse(statusCode, message, data) {\n                res.status(statusCode);\n                res.body = data;\n                for (var key in serializers) {\n                    if (req.accepts(key) || req.headers.accept == key) {\n                        var ser = serializers[key];\n                        try {\n                            ser.serialize(req, res, finishResponse);\n                        } catch (ex) {\n                            finishResponse(ex);\n                        }\n                        return;\n                    }\n                }\n                res.status(415);\n                finishResponse();\n\n                function finishResponse(err) {\n                    if (err) {\n                        // Serialization failed, revert to plain text.\n                        try {\n                            res.set('Content-Type', 'text/plain');\n                            res.status(500);\n                            res.send(err.toString());\n                        } catch (ex) {\n                            console.error('Unable to return exception: ', err, ex);\n                        }\n                    }\n                    res.end();\n                }\n\n            }\n\n        }\n    }\n\n    function restResponse(req, res, next) {\n        var rest = {\n            request: req,\n            response: res,\n            body: req.body,\n            continue:                       status(100, 'Continue'),\n            switchingProtocols:             status(101, 'Switching Protocols'),\n            checkpoint:                     status(103, 'Checkpoint'),\n            ok:                             status(200, 'OK'),\n            created:                        status(201, 'Created', 'Location'),\n            accepted:                       status(202, 'Accepted', 'Location'),\n            nonAuthoritativeInformation:    status(203, 'Non Authoritative Information'),\n            noContent:                      status(204, 'No Content'),\n            resetContent:                   status(205, 'Reset Content'),\n            partialContent:                 status(206, 'Partial Content'),\n            multipleChoices:                status(300, 'Multiple Choices'),\n            movedPermanently:               status(301, 'Moved Permanently', 'Location'),\n            found:                          status(302, 'Found', 'Location'),\n            seeOther:                       status(303, 'See Other'),\n            notModified:                    status(304, 'Not Modified'),\n            switchProxy:                    status(306, 'Switch Proxy'),\n            temporaryRedirect:              status(307, 'Temporary Redirect', 'Location'),\n            resumeIncomplete:               status(308, 'Resume Incomplete'),\n            badRequest:                     status(400, 'Bad Request'),\n            unauthorized:                   status(401, 'Unauthorized'),\n            paymentRequired:                status(402, 'Payment Required'),\n            forbidden:                      status(403, 'Forbidden'),\n            notFound:                       status(404, 'Not Found'),\n            methodNotAllowed:               status(405, 'Method Not Allowed'),\n            notAcceptable:                  status(406, 'Not Acceptable'),\n            proxyAuthenticationRequired:    status(407, 'Proxy Authentication Required'),\n            requestTimeout:                 status(408, 'Request Timeout'),\n            conflict:                       status(409, 'Conflict'),\n            gone:                           status(410, 'Gone'),\n            lengthRequired:                 status(411, 'Length Required'),\n            preconditionFailed:             status(412, 'Precondition Failed'),\n            requestEntityTooLarge:          status(413, 'Request Entity Too Large'),\n            requestURITooLong:              status(414, 'Request URI Too Long'),\n            unsupportedMediaType:           status(415, 'Unsupported Media Type'),\n            requestedRangeNotSatisfiable:   status(416, 'Requested Range Not Satisfiable'),\n            expectationFailed:              status(417, 'Expectation Failed'),\n            internalServerError:            status(500, 'Internal Server Error'),\n            notImplemented:                 status(501, 'Not Implemented'),\n            badGateway:                     status(502, 'Bad Gateway'),\n            serviceUnavailable:             status(503, 'Service Unavailable'),\n            gatewayTimeout:                 status(504, 'Gateway Timeout'),\n            httpVersionNotSupported:        status(505, 'HTTP Version Not Supported'),\n            networkAuthenticationRequired:  status(511, 'Network Authentication Required')\n        };\n\n        // prototypical inheritance from res\n        rest.__proto__ = res;\n\n        return rest;\n\n        function status(statusCode, message, header) {\n            return function(data) {\n                if (header) {\n                    // response data should go into a header, not body.\n                    res.set(header, data);\n                    data = arguments[1];\n                }\n                next(statusCode, message, data);\n                return rest;\n            }\n\n        }\n\n    }\n\n    function jsonSerializer() {\n        var ser = {\n            serialize: serialize,\n            deserialize: deserialize\n        }\n        return ser;\n\n        function deserialize(req, res, next) {\n            req.pipe(concatStream(function(data) {\n                try {\n                    var decoder = new stringDecoder.StringDecoder();\n                    var json = decoder.write(data);\n                    req.body = JSON.parse(json);\n                    next();\n                } catch (ex) {\n                    next(ex);\n                }\n            }));\n        }\n\n        function serialize(req, res, next) {\n            try {\n                res.set('Content-Type', 'application/json');\n                var json = JSON.stringify(res.body);\n                res.send(json);\n                next();\n            } catch (ex) {\n                next(ex);\n            }\n        }\n    }\n\n    function xmlSerializer() {\n        var ser = {\n            serialize: serialize,\n            deserialize: deserialize\n        }\n        return ser;\n\n        function deserialize(req, rest, next) {\n            req.pipe(concatStream(function(data) {\n                var decoder = new stringDecoder.StringDecoder();\n                var xml = decoder.write(data);\n                //TODO: req.body = XML.parse(xml);\n                next();\n            }));\n        }\n\n        function serialize(req, rest, next) {\n            res.set('Content-Type', 'application/xml');\n            //TODO: res.send(XML.stringify(res.body));\n            next();\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-express-rest/node_modules/express-rest/gruntfile.js":"module.exports = function (grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        nodeunit: {\n            all: ['test/*Test.js']\n        },\n        watch: {\n            nodeunit: {\n                files: ['./**/*.js'],\n                tasks: ['nodeunit']\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-nodeunit');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n\n    grunt.registerTask('test', ['nodeunit']);\n    grunt.registerTask('crunch', ['nodeunit', 'watch']);\n\n}","/home/travis/build/npmtest/node-npmtest-express-rest/node_modules/express-rest/sample/sample.js":"var express = require('express'),\n    expressRest = require('../expressRest');\n\nvar app = express();\nvar rest = expressRest(app);\n\nvar records = [\n    {value: 'Apple'},\n    {value: 'Banana'}\n];\n\nrest.get('/api/food', function(req, rest) {\n    rest.ok(records);\n});\n\nrest.get('/api/food/:id', function(req, rest) {\n    var record = records[req.params.id];\n    if (record) rest.ok(record);\n    else rest.notFound();\n});\n\nrest.put('/api/food/:id', function(req, rest) {\n    records[req.params.id] = req.body;\n    return rest.accepted('/api/food/' + encodeURI(req.params.id));\n});\n\nrest.post('/api/food', function(req, rest) {\n    records.push(req.body);\n    rest.created('/api/food/' + (records.length - 1));\n});\n\nrest.delete('/api/food/:id', function(req, rest) {\n    delete records[req.params.id];\n    rest.gone();\n})\n\n\nvar listener = app.listen(process.env.PORT, process.env.IP);\nvar addr = listener.address().address,\n    port = listener.address().port;\nif (addr === '0.0.0.0') addr = '127.0.0.1';\nconsole.info('Listening on http://' + addr + ':' + port + '/api/food');","/home/travis/build/npmtest/node-npmtest-express-rest/node_modules/express-rest/sample/server.js":"var express = require('express'),\n    expressRest = require('../expressRest');\n\nvar app = express();\nvar rest = expressRest(app);\n\nvar records = [\n    {id: 'a', value: 'Apple'},\n    {id: 'b', value: 'Banana'}\n];\n\nrest.get('/api/food', function(req, rest) {\n    rest.ok(records);\n});\n\nrest.get('/api/food/:id', function(req, rest) {\n   for (var i = 0; i < records.length; i++) {\n       var record = records[i];\n       if (record.id === req.params.id) {\n           rest.ok(record);\n           return;\n       }\n   }\n    rest.notFound();\n});\n\nrest.put('/api/food/:id', function(req, rest) {\n    if (req.body.id != req.params.id) return rest.badRequest('Cannot change id');\n    for (var i = 0; i < records.length; i++) {\n        var record = records[i];\n        if (record.id === req.params.id) {\n            records[i] = rest.body;\n            rest.accepted('/api/food/' + encodeURI(req.params.id))\n            return;\n        }\n    }\n    rest.notFound();\n});\n\nrest.post('/api/food', function(req, rest) {\n    if (!req.body.id) {\n        return rest.badRequest('id field is required');\n    }\n    for (var i = 0; i < records.length; i++) {\n        var record = records[i];\n        if (record.id === req.params.id) {\n            return rest.conflict('A record already exists with this URL.');\n        }\n    }\n    records.push(req.body);\n    rest.created('/api/food/' + encodeURI(req.body.id));\n});\n\nrest.delete('/api/food/:id', function(req, rest) {\n    for (var i = 0; i < records.length; i++) {\n        var record = records[i];\n        if (record.id === req.params.id) {\n            records.splice(i, 1);\n            return rest.gone('The record has been deleted.');;\n        }\n    }\n    rest.notFound();\n})\n\n\nvar listener = app.listen(process.env.PORT, process.env.IP);\nvar addr = listener.address().address,\n    port = listener.address().port;\nif (addr === '0.0.0.0') addr = '127.0.0.1';\nconsole.info('Listening on http://' + addr + ':' + port + '/api/food');"}